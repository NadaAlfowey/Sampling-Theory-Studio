function plotReconstructedSignal(originalSignal, reconstructedSignal) {
  // Clear the existing data in the reconstructed graph
  Plotly.deleteTraces(reconstructedGraph, 0);

  // Add the reconstructed signal to the reconstructed graph
  Plotly.addTraces(reconstructedGraph, reconstructedSignal);
}
------------------------------------------------------------------

// function sampleSignal(signalData, samplingRate) {
//   const sampledData = [];
//   const numSamples = Math.floor(signalData.x.length * samplingRate);
//   const sampleInterval = signalData.x.length / numSamples;

//   for (let i = 0; i < numSamples; i++) {
//     const x = i * sampleInterval;
//     const y = signalData.y[Math.floor(x)];

//     sampledData.push({ x: x, y: y });
//   }

//   return sampledData;
// }
-------------------------------------------------
function plotSampledSignal(originalSignal, sampledSignal) {
  // Clear the existing data in the signal graph
  Plotly.deleteTraces(signalGraph, 0);

  // Add the original signal to the signal graph
  Plotly.addTraces(signalGraph, originalSignal);

  // Add the sampled signal to the signal graph
  Plotly.addTraces(signalGraph, {
    x: sampledSignal.map(d => d.x),
    y: sampledSignal.map(d => d.y),
    mode: "markers",
    marker: {
      color: "red",
      size: 5
    },
    name: "Sampled Data"
  });
}
----------------------------------------------
function calculateDifference(signalData, reconstructedSignal) { // change it to 2 traces
  const differenceData = { x: [], y: [] };

  for (let i = 0; i < signalData.x.length; i++) {
    differenceData.x.push(signalData.x[i]);
    differenceData.y.push(signalData.y[i] - reconstructedSignal.y[i]);
  }

  return differenceData;
}
-----------------------------------------------
// samplingFrequency.addEventListener("change", () => {
//   const signalData = signalGraph.data[0];
//   const sampledSignal = sampleSignal(signalData, samplingFrequency.value);
//   const reconstructedSignal = reconstructSignal(sampledSignal, signalData.x.length);
//   const differenceSignal = calculateDifference(signalData, reconstructedSignal);

//   plotSampledSignal(signalData, sampledSignal);
//   plotReconstructedSignal(signalData, reconstructedSignal);
//   Plotly.update(differenceGraph, { x: differenceSignal.x, y: differenceSignal.y }, {}, [0]);
// });
---------------------------------------------
samplingFrequency.addEventListener("change", () => {
  const signalData = signalGraph.data[0];
  const sampledSignal = sampleSignal(signalData, samplingFrequency.value);
  const reconstructedSignal = reconstructSignal(sampledSignal, signalData.x.length);
  const differenceSignal = calculateDifference(signalData, reconstructedSignal);

  Plotly.update(signalGraph, { marker: { size: 6 } }, {}, [0]);
  plotReconstructedSignal(signalData, reconstructedSignal);
  Plotly.update(differenceGraph, { x: differenceSignal.x, y: differenceSignal.y }, {}, [0]);
});
-----------------------------------------
// Update the graphs whenever the sampling frequency is changed
//samplingFrequency.addEventListener("change", updateGraphs);
---------------------------------------------------
function updateGraphs() {
  // if (signalGraph.data.length > 0) {
  //   Plotly.deleteTraces(signalGraph, 0);
  //   Plotly.deleteTraces(reconstructedGraph, 0);
  //   Plotly.deleteTraces(differenceGraph, 0);
  //   Plotly.deleteTraces(differenceGraph, 0);
  // }
  if(signalGraph.data.length === 0) {
    Plotly.addTraces(signalGraph, { x: [], y: [], mode: "markers", marker: { color: "red", size: 5 }, name: "Sampled Data" });
    Plotly.addTraces(reconstructedGraph, { x: [], y: [], mode: "lines", line: { color: "red" }, name: "Reconstructed Signal" });
    Plotly.addTraces(differenceGraph, { x: [], y: [], mode: "lines", line: { color: "red" }, name: "Difference" });
    Plotly.addTraces(differenceGraph, { x: [], y: [], mode: "lines", line: { color: "blue" }, name: "Difference" });
  }
  if (signalGraph.data.length === 0) {
    return; // If there is no data in the signalGraph, exit the function
  }
  const signalData = signalGraph.data[0];
  const numPoints = signalData.x.length;
  // Remove the direct call to sampleData
  // const sampledSignal = sampleData(samplingFrequency.value);

  // Check if sampledData is not empty
  if (signalData && sampledData.length > 0) {
    const reconstructedSignal = reconstructSignal(sampledData, signalData.length);

    Plotly.update(signalGraph, { marker: { size: 6 } }, {}, [0]);
    Plotly.update(reconstructedGraph, { x: reconstructedSignal.x, y: reconstructedSignal.y }, {}, [0]);
    Plotly.update(differenceGraph, [{ x: signalGraph.data[0].x, y: signalGraph.data[0].y },{x:reconstructedGraph.data[0].x, y:reconstructedGraph.data[0].y}], {}, [0,1]);
  }
}